
------------------------------------------------------------------------------------
	Git Bash
------------------------------------------------------------------------------------
Амперсанд "&" в конце команды не блокирует консоль на время ее (команды) выполнения:
git gui& - запуск GUI для просмотра и коммита последних изменений
gitk& - запуск GUI для просмотра истории коммитов

Просмотр списка существующих веток: git branch --list
Переключение на другую ветку: git checkout <BranchName>
Создание новой ветки с переключением на нее: git checkout -b <BranchName> master
Просмотр текущего состояния ветки (имя ветки, незакоммитанные изменения): git status
Переименование текущей ветки: git branch -m <NewBranchName>

Предварительное сохранение изменений без коммита: git stash
Применить последнее изменение (без удаления его из стека): git stash apply
Удалить последнее изменение из стека: git stash drop
Применить последнее изменение и удалить его из стека: git stash pop

Показать историю двух веток в одном окне: gitk origin/master <BranchName> &

Сброс состояния ветки в соответствие с выбранным коммитом: в gitk выбрать "reset <branch> to here" на данном коммите, Hard

------------------------------------------------------------------------------------
	Чтобы объединить несколько коммитов вместе:
------------------------------------------------------------------------------------
git rebase -i sha1
где sha1 - id предыдущего коммита (стоящего перед коммитом, в который планируем "складывать" изменения)

В новом окне VIM-a переставляем коммиты в нужном нам порядке, в строке с коммитом (куда складываем) - ничего не меняем
в следующих за ней (которые в этот коммит складываем) меняем pick на s (это, в отличие от f, позволит потом отредактировать название итогового коммита)

выходим в режим консоли: ":"
wq
ENTER
(или ZZ)

------------------------------------------------------------------------------------
	Чтобы разбить один коммит на несколько:
------------------------------------------------------------------------------------
git rebase -i sha1
где sha1 - id предыдущего коммита (который стоит перед коммитом, который собрались редактировать)
git gui& - запускаем GUI, откуда делаем несколько нужных коммитов
	[здесь можно вносить правки в IDE]
git rebase --continue
в окне gitk жмем ctrl+F5

------------------------------------------------------------------------------------
* Синхронизировать свой origin/master branch с главным branch:
(origin - репозиторий, master - branch)
git fetch

* Пушнуть отличия текущей ветки от master в origin: git push origin <BranchName>
для повторного пуша той же (уже существующей) ветки надо добавить ключ -f

* В VIM: переход в режим текстового редактора/консоли: "i"/":"
dd - удалить строку в буфер
p - вставить строку после курсора
:m 12 	move current line to after line 12
:m 0 	move current line to before first line
:m $ 	move current line to after last line
:5,7m 21 	move lines 5, 6 and 7 to after line 21
:5,7m 0 	move lines 5, 6 and 7 to before first line
:5,7m $ 	move lines 5, 6 and 7 to after last line
:.,.+4m 21 	move 5 lines starting at current line to after line 21
:,+4m14 	same (. for current line is assumed)
:m .+1 (which can be abbreviated to :m+) moves the current line to after line number .+1 (current line number + 1). In short - current line moved down one line
:m .-2 (which can be abbreviated to :m-2) moves the current line to after line number .-2 (current line number − 2). In short - current line moved up one line

* Накатить коммиты [со следующего за sha1 до последнего] на master:
git rebase -i sha1 --onto origin/master
При возникновении проблем устраняем их и выполняем: git rebase --continue

* Варианты rebase:
git rebase -i origin/last_branch_name
git rebase -i TAG_NAME

* Создание тага:
git tag -a -F path_to_file_with_tag_info TAG_NAME_IN_UPPERCASE
После создания своего тага, он самому себе не виден (глюк Git-а), надо выполнить: git gc [крайняя форма: git gc --aggressive]

* Пересадка коммита с заданным sha1 на верхушку текущей ветки:
git cherry-pick sha1

* Смена репозитория:
git remote set-url origin git@git.another-company.com:dev

------------------------------------------------------------------------------------
	Работа без git gui, gitk, из консоли
------------------------------------------------------------------------------------
git init					Создание нового хранилища в текущей директории
git status					Просмотр изменений, можно скопировать имя файла
git add	<filename>			Добавление имени файла в индекс
git commit -m <commit_name>	Создание коммита из индекса
------------------------------------------------------------------------------------

* Посмотреть автора строк указанного файла:
git gui blame <path/filename>&

* Link для запуска git-а:
C:\WINDOWS\system32\cmd.exe /c ""C:\Program Files (x86)\Git\bin\sh.exe" --login -i"

* Забрать ветки с сервера по умолчанию
git fetch

* Забрать ветки с сервера <name>
git fetch <name>

------------------------------------------------------------------------------------
* Конфиг Git-а расположен в трех местах
------------------------------------------------------------------------------------
Git ищет параметры в таком порядке:
1. /etc/gitconfig - папка с установленным Git-ом
git config --system <param.name> <param.value>

2. ~/.gitconfig - папка текущего юзера
git config --global <param.name> <param.value>

3. .git/config - репозиторий текущего проекта
git config <param.name> <param.value>
------------------------------------------------------------------------------------

* Rebase с фиксом пробельных символов по текущим правилам:
git rebase --whitespace=fix ..

* Добавление в индекс измененных файлов, начиная с указанного пути:
git add <путь>
git add domains/stay

* Добавление в индекс удаленных файлов:
git add -u <путь>

* Просмотр истории заданной ветки без переключения на нее:
gitk <branch_name>

* Удаление ненужных изменений при merge конфликте:
git rm <path[/file]>
В пути и имени поддерживается regexp

* Запрет перезаписывания line-ending-ов:
git config --global core.safecrlf true

* Удаление ветки:
git branch -d <branch_name>

* Удаление ветки из удаленного репозитория origin:
git push origin :<branch_name>

* Удаление тега MAMA_3:
git tag -d MAMA_3

* Удаление тега из удаленного репозитория origin:
git push origin :refs/tags/MAMA_3

* Перезапись истории: git filter-branch
http://git-scm.com/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8

* Делаем невозможным push без параметров:
git config --global push.default nothing

* Апдейт перепушаных тегов:
git fetch --tags

* Перенос ветки в другой репозиторий (команды запускаем из директории с исходным репо /d/Magic/dev):
git checkout -b dco_generator
mkdir /d/Magic/generator
pushd /d/Magic/generator
git init
git pull /d/Magic/dev dco_generator
popd

* Поиск ветки с известным куском названия:
git branch -r | grep part_of_name

* Пуш всех веток и тегов:
git push -u origin --all
git push -u origin --tags

* Добавление удаленного репозитория:
git remote add <name> <url>
git remote add origin git@bitbucket.org:andrei_punko/timesheet-plugin.git

* Список веток в удаленных репозиториях:
git branch -r

* Список тегов в репозитории:
git ls-remote --tags <repository>

* Push all tags to remote repo
git push --tags <remote>
git push <remote> --tags

* Генерация нового SSH-ключа
ssh-keygen -t rsa

* List your existing remotes
git remote -v

* Set new origin url
git remote set-url origin <new_url>

* found commits that don't belong to any branch
git fsck --lost-found

* change author of last commit
git commit --amend --author "Andrei Punko <andd3dfx@gmail.com>"

* rebase using first commit
git rebase -i --root

* group replacement text1->text2 in vim
:%s/text1/text2/

* change author of commit
git filter-branch --env-filter 'if [ "$GIT_AUTHOR_EMAIL" = "Andrei_Punko@another-company.com" ]; then
     GIT_AUTHOR_EMAIL=andd3dfx@gmail.com;
     GIT_AUTHOR_NAME="Andrei Punko";
     GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL;
     GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"; fi' -- --all
	 
* Восстановление данных Git в случае hard reset или удаления ветки:
git reflog
- позволяет посмотреть последние коммиты
для последних - открыть gitk, и найти нужное, после чего создать ветку для этого sha1

* Install Git tools on Linux
sudo yum install -y gitk
sudo yum install -y git-gui

* Key generation
ssh-keygen -t ed25519 -C "Andrei.Punko@best-company.com"

* Show history in terminal
git log

* Check current state (branch, changes etc.)
git status

* Exit from VIM
without saving: :q!
with saving: :wq

* Add files to commit and create commit
git add <file path and name>
git commit -m "Add code coverage check into pipeline"

------------------------------------------------------------------------------------
* Set commiter name/email for particular repo (not globally):
git config user.name "Andrei Punko"
git config user.email "andd3dfx@gmail.com"
cat .git/config

* How to resolve problem with self-signed certificate
https://stackoverflow.com/questions/11621768/how-can-i-make-git-accept-a-self-signed-certificate
GIT_SSL_NO_VERIFY=true git clone <url>

* Add the ability to run GitHub actions job manually
https://build5nines.com/configuring-manual-triggers-in-github-actions-with-workflow_dispatch/
Add next code to .yml config:
# configure manual trigger
on:
  workflow_dispatch:

* Add condition in GitHub actions to avoid some step in case of pull request:
  - name: Commit the badge (if it changed)
    if: ${{ github.event_name != 'pull_request' }}
    run: |
    ...

* How to use Linux utils in Git-Bash console
Download put utils into ./Git/mingw64/bin/

* Change author of last commit
https://stackoverflow.com/questions/3042437/how-can-i-change-the-commit-author-for-a-single-commit
git commit --amend --author="Andrei Punko <andd3dfx@gmail.com>" --no-edit
