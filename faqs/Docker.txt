
* preparation to Docker installation in Windows
enable virtualization in BIOS
update Windows to required version
install Hyper-V

* setup docker according to https://docs.docker.com/engine/installation/linux/ubuntulinux/
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
less /etc/apt/sources.list.d/docker.list
sudo apt-get update
apt-cache policy docker-engine
sudo apt-get update
sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
sudo apt-get update
sudo apt-get install docker-engine
sudo service docker start

* start docker demo instance
docker run hello-world

* start docker demo instance in detached mode
docker run hello-world -d

* expose some ports
docker run -d -p host_port:container_port repository:port/name:version

* start a postgres instance with name=some-postgress and password=mysecretpassword
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres

* list docker containers
docker ps -a	- all containers
docker ps		- running containers

* configure docker to start on boot (for latest Ubuntu, for old (14.10 and below) - Docker should start automatically)
sudo systemctl enable docker

* upgrade docker
sudo apt-get update
sudo apt-get upgrade docker-engine

* connect to it via psql
docker run -it --rm --link some-postgres:postgres postgres psql -h postgres -U postgres

* save changes of docker container
docker commit 0e09a6bc1bf7 my-image		# CONTAINER ID and name

* stop docker container
docker stop 0e09a6bc1bf7							# CONTAINER ID

* list all docker containers
docker images -a

* Run container from image my-image in background and print container ID
docker run -d my-image

* setup --registry-mirrors
{
  "registry-mirrors": [],
  "insecure-registries": [
    "<host>:<port>:18443",
    "<host>:<port>:18444",
    "<host>:<port>:18445",
    "128.16.0.21:18443",
    "128.16.0.21:18444",
    "128.16.0.21:18445"
  ]
}

* login to docker via console
docker login -u <username> -p <pass> <host>:<port>
docker login <host>:<port>

* push custom docker image
docker login -u <username> -p <pass> <host>:<port>
docker images
docker tag 03b4557ad7b9 <host>:<port>/somenewname:latest
docker push <host>:<port>/somenewname

* to support pushes from maven
add to maven settings.xml:
<servers>
	<server>
		<id>docker-hub</id>
		<username>admin</username>
		<password>...</password>
		<configuration>
			<email>andd3dfx@gmail.com</email>
		</configuration>
	</server>
</servers>

* Delete all docker images
docker rmi $(docker images -q)

* remove image by ID
docker rmi IMAGE_ID

* tricky filtering during remove
docker rmi | grep ...

* To make Docker available for docker-maven-plugin we need to make some preparations:
Add DOCKER_HOST=tcp://127.0.0.1:4243
- to Docker config file: /etc/default/docker
- to Jenkins job

* setup docker for jenkins
All from root permissions
                1. /etc/init.d/docker stop -- stop docker service
                2. vim /etc/default/docker -- add config "DOCKER_OPTS" for docker to open custom port
                                DOCKER_OPTS="-H tcp://192.168.8.222:2375"
                3. vim /lib/systemd/system/docker.service -- add config to docker.service read custom config (/etc/default/docker)
                                ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS
                                EnvironmentFile=-/etc/default/docker
                4. systemctl daemon-reload -- reload
                5. /etc/init.d/docker start -- start docker service

* start image
docker run -p 5552:5432 <host>:<port>/smart/smart-data-image:1.11

* list all images that running now and stopped
docker ps -a

* To remove all unused Docker containers, images, networks and volumes:
docker system prune

or individually:
docker container prune
docker image prune
docker network prune
docker volume prune

* For work of fabric8 docker-maven-plugin Docker config file ~/.docker/config.json should contain next item:
{"credsStore":"wincred"}

* Kill All Running Containers
docker kill $(docker ps -q)

* Delete all stopped Docker containers
Use -f option to nuke the running containers too.
docker rm $(docker ps -a -q)

* Remove a Docker Image
docker rmi <image name>

* Delete all Docker images
docker rmi $(docker images -q)

* Delete all untagged (dangling) Docker images
docker rmi $(docker images -q -f dangling=true)

* Delete all images
docker rmi $(docker images -q)

* Remove dangling volumes
docker volume rm -f $(docker volume ls -f dangling=true -q)

* entering into docker container logs
$ docker container ps
[get container name from NAMES column]
$ docker exec -it <container-name> /bin/bash

* stop all Docker containers:
docker container stop $(docker container ls –aq)

* remove all stopped containers:
docker container rm $(docker container ls –aq)

* check installed docker:
docker run hello-world

* check started containers:
docker ps

* check logs of some container:
docker logs <container-name>

* Get IP of Docker image:
docker inspect -f "{{ .NetworkSettings.IPAddress }}" <container_name>

* Enter into container by SSH
docker exec -it <container_name> sh
docker exec -it <container_name> bash

* Dockerfile manual
https://habr.com/ru/company/ruvds/blog/439980/
https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index
= FROM — задаёт базовый (родительский) образ.
	FROM <image>
	FROM <image>:<tag>
FROM can appear multiple times within a single Dockerfile in order to create multiple images.

= MAINTAINER - allows you to set the Author field of the generated images.
	MAINTAINER <name>

= LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
	LABEL <key>=<value> [<key>=<value> ...]

= ENV — устанавливает постоянные переменные среды.
    ENV <key> <value>
    ENV <key>=<value> [<key>=<value> ...]

= RUN — выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
    RUN <command> (shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)
    RUN ["<executable>", "<param1>", "<param2>"] (exec form)

= COPY — копирует в контейнер файлы и папки.
    COPY <src> [<src> ...] <dest>
    COPY ["<src>", ... "<dest>"] (this form is required for paths containing whitespace)

= ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.
    ADD <src> [<src> ...] <dest>
    ADD ["<src>", ... "<dest>"] (this form is required for paths containing whitespace)
COPY vs ADD: In the part where their use cases overlap, ADD and COPY work similarly. Both commands copy the contents of the locally available file or directory to the filesystem inside a Docker image. However, while COPY has no other functionalities, ADD can extract compressed files and copy files from a remote location via a URL.

= CMD — описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен. Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD (если больше одной - выполняется последня).
    CMD ["<executable>","<param1>","<param2>"] (exec form, this is the preferred form)
    CMD ["<param1>","<param2>"] (as default parameters to ENTRYPOINT)
    CMD <command> <param1> <param2> (shell form)

= WORKDIR — задаёт рабочую директорию для следующей инструкции.
	WORKDIR </path/to/workdir>

= ARG — задаёт переменные для передачи Docker во время сборки образа.
	ARG <name>[=<default value>]

= ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются.
    ENTRYPOINT ["<executable>", "<param1>", "<param2>"] (exec form, preferred)
    ENTRYPOINT <command> <param1> <param2> (shell form)

В документации к Docker есть несколько рекомендаций, касающихся того, какую инструкцию, CMD или ENTRYPOINT, стоит выбрать в качестве инструмента для выполнения команд при запуске контейнера:
    Если при каждом запуске контейнера нужно выполнять одну и ту же команду — используйте ENTRYPOINT.
    Если контейнер будет использоваться в роли приложения — используйте ENTRYPOINT.
    Если вы знаете, что при запуске контейнера вам понадобится передавать ему аргументы, которые могут перезаписывать аргументы, указанные в Dockerfile, используйте CMD.

= EXPOSE — указывает на необходимость открыть порт. EXPOSE does not make the ports of the container accessible to the host.
	EXPOSE <port> [<port> ...]
	
= VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.
    VOLUME ["<path>", ...]
    VOLUME <path> [<path> ...]

= HEALTHCHECK - Tells Docker how to test a container to check that it is still working.
    HEALTHCHECK [<options>] CMD <command> (check container health by running a command inside the container)
    HEALTHCHECK NONE (disable any healthcheck inherited from the base image)
	The <options> that can appear are...
		--interval=<duration> (default: 30s)
		--timeout=<duration> (default: 30s)
		--retries=<number> (default: 3)


= Docker применяется для управления отдельными контейнерами (сервисами), из которых состоит приложение.
= Docker Compose используется для одновременного управления несколькими контейнерами, входящими в состав приложения. Этот инструмент предлагает те же возможности, что и Docker, но позволяет работать с более сложными приложениями.

* Docker Сompose manual
Статья https://docs.docker.com/compose/gettingstarted/ и это видимо ее перевод: https://dker.ru/docs/docker-compose/getting-started/
https://dker.ru/docs/docker-compose/compose-file-reference/
https://habr.com/ru/company/ruvds/blog/450312/
Справочник: https://docs.docker.com/compose/compose-file/compose-file-v3/

version: '3'
services:
  web:
    build: .			# Build an image using Dockerfile from current directory
	network_mode: bridge	# Network mode (bridge/host/none/service:[service name]/container:[container name/id]). On a user-defined bridge network, containers can resolve each other by name or alias.
    ports:
     - "5000:5000"		# Ports binding [host port]:[container port]
    volumes:
     - .:/code			# Mount paths or named volumes, optionally specifying a path on the host machine (HOST:CONTAINER), or an access mode (HOST:CONTAINER:ro)
    depends_on:			# Express dependency between services
     - redis
  redis:
    image: redis		# Used existing redis:latest Docker image
	network_mode: bridge

If you want to run your services in the background, you can pass the -d flag (for “detached” mode) to 'docker-compose up'

If you started Compose with 'docker-compose up -d', stop your services once you’ve finished with them: 'docker-compose stop'
You can bring everything down, removing the containers entirely, with the 'down' command. Pass '--volumes' to also remove the data volume: 'docker-compose down --volumes'

* Вывести список контейнеров:
docker-compose ps

* Выполнить команду в выполняющемся контейнере:
docker-compose exec [service name] [command]

* Follow the Logs of Running Docker Containers With Docker Compose
docker-compose logs -f

* Follow the logs of one container running under Docker Compose
docker-compose logs pump <name>

* Docker on windows fails with //./pipe/docker_engine: The system cannot find the file specified
https://forums.docker.com/t/docker-on-windows-fails-with-pipe-docker-engine-the-system-cannot-find-the-file-specified/28479/4
"I fixed the issue by switch docker to windows containers, then switch docker to linux container again. I used docker desktop tool."
We can switch docker container by command line, go to path of docker and run command:
./DockerCli.exe -SwitchDaemon

* Ошибка Docker: “no matching manifest for windows/amd64 in the manifest list entries”
https://stackoverflow.com/questions/48066994/docker-no-matching-manifest-for-windows-amd64-in-the-manifest-list-entries
You are in Windows container mode. So if you're not sure that the image you want to pull is built for the Windows architecture, you need to switch to Linux containers.

* How to get the IP address of the docker host from inside a docker container
https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach?page=1&tab=votes#tab-top
https://stackoverflow.com/questions/22944631/how-to-get-the-ip-address-of-the-docker-host-from-inside-a-docker-container
host.docker.internal (instead of the 127.0.0.1 in your connection string)

* Add support of russian characters in Docker container
Set env variables inside container:
LANG=C.UTF-8
LC_ALL=C.UTF-8


* Login into Docker images artifactory
docker login <host> -u <username> -p <password>

* Pull image
docker pull tarantool/tarantool:2.7.2

* Tag image
docker tag tarantool/tarantool:2.7.2 atmc-docker-lib.nexus-ci.corp.dev.vtb/tarantool/tarantool:2.7.2

* Push image
docker push atmc-docker-lib.nexus-ci.corp.dev.vtb/tarantool/tarantool:2.7.2

* Get address of Docker host
https://ab57.ru/cmdlist/nslookup.html
nslookup host.docker.internal

* Start RabbitMQ Docker container
docker run -d --hostname guru-rabbit --name some-rabbit -p 8080:15672 -p 5671:5671 -p 5672:5672 rabbitmq:3-management
Use login/password: guest/guest

* Stub Dockerfile for Java application
FROM openjdk:17-jdk-alpine
VOLUME /tmp
EXPOSE 8080
ADD target/articles-backend-app-0.0.1-SNAPSHOT.jar app.jar
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-Dspring.profiles.active=container", "-jar", "/app.jar"]

* Как добиться того, чтобы один Docker-контейнер ждал полного старта другого контейнера?
https://stackoverflow.com/questions/31746182/docker-compose-wait-for-container-x-before-starting-y
Использовать healthcheck:
https://docs.docker.com/compose/compose-file/#healthcheck
```
version: "3"

services:
  rabbitmq: # login guest:guest
    image: rabbitmq:management
    ports:
      - "15672:15672"
	...
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5

  app:
    build: ./app/
    depends_on:
      - rabbitmq
	...
```
(для версий более ранних, чем 3 - см. ссылку выше)

* Copy files from container's folder to host machine's folder
$ docker cp <container_name>:<path_inside_container> <path_on_host_machine>
For example:
$ docker cp django:/usr/local/lib/python3.9/site-packages D://Work//temp

* Problems with getting docker image during testcontainers run
like next: "Status 500: {"message":"Head \"https://registry-1.docker.io/v2/testcontainers/ryuk/manifests/0.3.1\": unauthorized: incorrect username or password"}"
https://stackoverflow.com/questions/72205231/test-ignored-and-failing-when-running-it-test-in-spring-boot-mongodb-test-conta
$ docker login index.docker.io

* How to increase max connections for PostgreSQL container
https://stackoverflow.com/questions/47252026/how-to-increase-max-connection-in-the-official-postgresql-docker-image
First approach: add into docker-compose.yml:
command: postgres -c 'max_connections=200'

Full config example:
----------------------------------
version: '2'
services:
  postgres:
    image: postgres:10.3-alpine
    command: postgres -c 'max_connections=200'
    environment:
      POSTGRES_DB: pgdb
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    stdin_open: true
    tty: true
    ports:
    - 5432:5432/tcp
----------------------------------

Second approach: add next command into sql script:
ALTER SYSTEM SET max_connections = 500;
and put script into /docker-entrypoint-initdb.d/ directory of container, using volume mounting or using docker-compose:
----------------------------------
version: '3'
services:
  db:
    image: postgres:latest
    volumes:
      - ./max_conns.sql:/docker-entrypoint-initdb.d/max_conns.sql
----------------------------------

* Change Docker parallel downloads/uploads:
https://stackoverflow.com/questions/43479614/docker-parallel-operations-limit
Add next lines into configuration file:
{
    "max-concurrent-uploads": 1,
    "max-concurrent-downloads": 1
}

* How to fix an error "Status 500: ... unauthorized: incorrect username or password"
```
Status 500: {"message":"Head \"https://registry-1.docker.io/v2/testcontainers/ryuk/manifests/0.3.1\": unauthorized: incorrect username or password"}
```
https://stackoverflow.com/questions/72205231/test-ignored-and-failing-when-running-it-test-in-spring-boot-mongodb-test-conta
As a workaround, login to Docker Hub using this URL (from usual cmd console):
$ docker login index.docker.io

* ENTRYPOINT vs CMD
= ENTRYPOINT is the default command to be processed
= If not specified, /bin/sh -c is executed as the default command
= Arguments to the ENTRYPOINT command should be specified separately using CMD
= If the default command is specified using CMD instead of ENTRYPOINT, the command is executed as an argument to the default entrypoint sh -c which can give unexpected results
= If the arguments to the command are specified within the ENTRYPOINT, then they _cannot be overwritten_ from the command line

Dockerfile == Containerfile

ADD or COPY
= ADD and COPY are doing the same
= COPY is simpler and has less features
= ADD has sepcifica features
== ADD can directly extract the contents of a tar file into the container
== ADD can fetch files from a URL, but this is deprecated, rather use `RUN wget` to fetch the file, and delete them afterwards when the file is no longer needed.

Options like ADD, COPY, ENTRYPOINT, CMD are used in shell form and in exec form:
Shell form is a list of items: `ADD /my/file /mydir`
Exec form is a JSON array of items: `ADD ["/my/file", "/mydir"]`
Using exec form is preferred, as shell form wraps command in a /bin/sh -c shell, which creates a sometimes unnecessary shell process.

To avoid creation of extra Docker image layers - compound several RUN commands into single RUN command using `&& \` (with \ for multiple lines). And add clean of downloaded unused files after that to reduce image size.

* Docker volumes
docker volume create myvol		#create volume
docker volume ls				#check volume content
docker volume inspect my-vol | less		#inspect volume

docker run -it --name voltest --rm --mount source=myvol,target=/data nginx:latest /bin/sh
cp /etc/hosts /data; touch /data/testfile; ctrl-P, ctrl-Q
sudo ls /var/lib/docker/volumes/myvol/_data/

docker run -it --name voltest2 --rm --mount source=myvol,target=/data nginx:latest /bin/sh
ls /data; touch /data/newfile; ctrl-P, ctrl-Q

* History of Docker image (layer diffs during its creation)
docker history <image-name>

* To build some Java project without JDK inside Docker container - put 2 files into root project folder and run `docker compose up`.
File Dockerfile:
```
FROM maven:3-jdk-8-alpine as builder
WORKDIR /usr/local/
ENTRYPOINT ["mvn", "install"]
```

File docker-compose.yml:
```
version: "3"

services:
  builder:
    build: ./
    volumes:
      - ./:/usr/local
```

* Tag existing Docker image with new tag
https://stackoverflow.com/questions/64350015/how-to-duplicate-docker-image-with-a-new-tag
Assuming your image is called `best-ui` and has the tag `1.0.0` we will clone this with the tag `old`:
$ docker tag best-ui:1.0.0 best-ui:old
or (with docker registry in tag):
$ docker tag andd3dfx/best-ui:1.0.0 andd3dfx/best-ui:old

* Add user to docker-users group
https://stackoverflow.com/questions/61530874/how-do-i-add-myself-to-the-docker-users-group-on-windows
net localgroup docker-users "Andrei" /ADD
